df_s[["Region"]] = 1
df = full_join(df_s, df_b)
df_s$DC <- as.double(df_s$DC)
df_s$FWI <- as.double(df_s$FWI)
df = full_join(df_s, df_b)
dim(df)
str(df)
unique(df$year)
unique(df$month)
colSums(is.na(df))
df = df %>% drop_na(DC)
colSums(is.na(df))
dim(df)
unique(df$Classes)
unique(df$Region)
df$Classes <- trimws(df$Classes, which = c("both"))
unique(df$Classes)
unique(df$Classes)
dim(df)
df$Classes <- mapvalues(df$Classes, from=c("not fire","fire"), to=c(0,1))
unique(df$Classes)
df$Classes <- as.numeric(df$Classes)
unique(df$Classes)
st(df)
?scale
str(df)
df <- df[-c(3)]
str(df)
df_scaled[-c(1,2,13,14)] <- scale(df[-c(1,2,13,14)])
df_scaled = df
df_scaled[-c(1,2,13,14)] <- scale(df[-c(1,2,13,14)])
st(df)
st(df_scaled)
df_scaled = df
df_scaled[-c(1,2,13,14)] <- scale(df[-c(1,2,13,14)])
df <- df[-c(3)]
st(df_scaled)
st(df)
st(df_scaled)
corr_mat <- round(cor(df),2)
p_mat <- cor_pmat(df)
corr_mat <- ggcorrplot(
corr_mat,
hc.order = FALSE,
type = "upper",
outline.col = "white",
)
ggplotly(corr_mat)
library(ggplot2)
library(dplyr)
library(vtable)
library(plyr)
library(ggplot2)
library(ggcorrplot)
library(plotly)
library(tidyverse)
df_b <- read.csv("./Algerian_forest_fires_dataset_Bejaia.csv")
df_s <- read.csv("./Algerian_forest_fires_dataset_Sidi_Bel_Abbes.csv")
colSums(is.na(df_b))
colSums(is.na(df_s))
df_b[["Region"]] = 0
df_s[["Region"]] = 1
df_s$DC <- as.double(df_s$DC)
df_s$FWI <- as.double(df_s$FWI)
df = full_join(df_s, df_b)
dim(df)
str(df)
summary(df)
unique(df$year)
unique(df$month)
unique(df$Classes)
unique(df$Region)
df$Classes <- trimws(df$Classes, which = c("both"))
unique(df$Classes)
unique(df$Classes)
df$Classes <- trimws(df$Classes, which = c("both"))
unique(df$Classes)
df$Classes <- trimws(df$Classes, which = c("both"))
unique(df$Classes)
df$Classes <- trimws(df$Classes, which = c("both"))
unique(df$Classes)
View(df)
df$Classes <- mapvalues(df$Classes, from=c("not fire","fire"), to=c(0,1))
unique(df$Classes)
df$Classes <- as.numeric(df$Classes)
st(df)
df = df %>% drop_na(Classes)
unique(df$Classes)
df$Classes <- mapvalues(df$Classes, from=c("not fire","fire"), to=c(0,1))
unique(df$Classes)
df$Classes <- as.numeric(df$Classes)
st(df)
df <- df[-c(3)]
df_scaled = df
df_scaled[-c(1,2,13,14)] <- scale(df[-c(1,2,13,14)])
st(df_scaled)
corr_mat <- round(cor(df),2)
p_mat <- cor_pmat(df)
corr_mat <- ggcorrplot(
corr_mat,
hc.order = FALSE,
type = "upper",
outline.col = "white",
)
ggplotly(corr_mat)
corr_mat <- round(cor(df),2)
p_mat <- cor_pmat(df)
corr_mat <- ggcorrplot(
corr_mat,
hc.order = FALSE,
type = "upper",
outline.col = "white",
)
ggplotly(corr_mat)
ggplot(data = df_scaled) +
geom_point(x = df_scaled$month, x=df_scaled$Classes)
ggplot(data = df_scaled) +
geom_point(mapping = aes(x = df_scaled$Temperature, y = df_scaled$Classes))
ggplot(data = df_scaled) +
geom_point(mapping = aes(x = Temperature, y = Classes))
ggplot(data = df) +
geom_point(mapping = aes(x = Temperature, y = Classes))
df_scaled
ggplot(data = df_scaled) +
geom_point(mapping = aes(x = Temperature, y = Classes))
aggregate
?aggregate
aggregate(df_scaled$Temperature, FUN = max())
aggregate(df_scaled, FUN = max(df_scaled$Temperature))
aggregate(df_scaled, FUN = mean
(df_scaled$Temperature))
View(df_1)
agg = aggregate(df_scaled, by = list(df_scaled$Classes, FUN=sum))
agg = aggregate(df_scaled, by = list(df_scaled$Classes),FUN = sum)
agg
agg = aggregate(df_scaled, by = list(df_scaled$Region),FUN = sum)
agg
agg = aggregate(df_scaled, by = list(df$Region),FUN = sum)
agg
agg = aggregate(df_scaled, by = df$Region,FUN = sum)
list(
agg
agg
aggregate(df_scaled, by = list(df$Region),FUN = sum)
df_scaled %>% ggplot() +
geom_bar(aes(x = Region, y = sum(Classes), fill = Temperature))
geom_bar(aes(x = Region, y = sum(Classes))
geom_bar(aes(x = Region, y = sum(Classes))
df_scaled %>% ggplot() +
geom_bar(aes(x = Region, y = sum(Classes)))
df_scaled %>% ggplot() +
geom_bar(x = Region, y = sum(Classes))
df_scaled %>% ggplot() +
geom_bar(x = df_scaledRegion, y = sum(df_scaledClasses))
df_scaled %>% ggplot() +
geom_bar(x = df_scaled$Region, y = sum(df_scaled$Classes))
ggplot(data = df_scaled) +
geom_bar(x = df_scaled$Region, y = sum(df_scaled$Classes))
ggplot(data = df_scaled) +
geom_bar(mapping = aes(x=df_scaled$Region, y=df_scaled$Classes))
ggplot(df_scaled, aes(Region,Classes))
ggplot(df_scaled, aes(Region,Classes)) + geom_point()
ggplot(df_scaled, aes(Region,Classes)) + geom_bar()
ggplot(df_scaled, aes(Region, Classes)) + geom_bar()
ggplot(df_scaled, aes(Region, sum(Classes)))
aggregate(df_scaled$Region ~ df_scaled$Classes)
aggregate(df_scaled$Region ~ df_scaled$Classes, FUN = sum)
aggregate(df_scaled$Region ~ df_scaled$Temperature, FUN = mean)
aggregate(df_scaled$Region ~ df_scaled$Classes, FUN = sum)
aggregate(df_scaled$Region ~ df_scaled$Temperature, FUN = mean)
aggregate(df_scaled$Region ~ df_scaled$Classes, FUN = sum)
aggregate(df$Region ~ df$Temperature, FUN = mean)
aggregate(df$Temperature ~ df$Region, FUN = mean)
aggregate(df_scaled$Region ~ df_scaled$Classes, FUN = sum)
aggregate(df_scaled$Classes ~ df_scaled$Region, FUN = sum)
aggregate(df$Temperature ~ df$Region, FUN = mean)
aggregate(df_scaled$Classes ~ df_scaled$Region, FUN = sum)
aggregate(df$Temperature ~ df$Region, FUN = mean)
geom_col(position='dodge)
df_scaled %>%
group_by(Region) %>%
summarise(Region = Region, Number_of_fires = sum(Classes)) %>%
ggplot(aes(x=Region, y=Number_of_fires))+
geom_col(position='dodge')
df_scaled %>%
group_by(Region) %>%
summarise(Region = Region, Number_of_fires = sum(Classes)) %>%
ggplot(aes(x=Region, y=Number_of_fires))+
geom_col(position='dodge')
geom_col(position='dodge', fill = 'blue)
df_scaled %>%
group_by(Region) %>%
summarise(Region = Region, Number_of_fires = sum(Classes), Temperature = Temperature) %>%
ggplot(aes(x=Region, y=Number_of_fires))+
geom_col(position='dodge', fill = Temperature)
df_scaled %>%
group_by(Region) %>%
summarise(Region = Region, Number_of_fires = sum(Classes), Temperature = Temperature) %>%
ggplot(aes(x=Region, y=Number_of_fires))+
geom_col(position='dodge', fill = Temperature)
df_scaled %>%
group_by(Region) %>%
summarise(Region = Region, Number_of_fires = sum(Classes), Temperature = Temperature) %>%
ggplot(aes(x=Region, y=Number_of_fires, fill = Temperature))+
geom_col(position='dodge')
df_scaled %>%
group_by(Region) %>%
summarise(Region = Region, Number_of_fires = sum(Classes), Temperature = mean(Temperature)) %>%
ggplot(aes(x=Region, y=Number_of_fires, fill = Temperature))+
geom_col(position='dodge')
df %>%
group_by(Region) %>%
summarise(Region = Region, Number_of_fires = sum(Classes), Temperature = mean(Temperature)) %>%
ggplot(aes(x=Region, y=Number_of_fires, fill = Temperature))+
geom_col(position='dodge')
corr_mat <- round(cor(df),2)
p_mat <- cor_pmat(df)
corr_mat <- ggcorrplot(
corr_mat,
hc.order = FALSE,
type = "upper",
outline.col = "white",
)
ggplotly(corr_mat)
aggregate(df$Classes ~ df$Region, FUN = sum)
df %>%
group_by(Region) %>%
summarise(Region = Region, Number_of_fires = sum(Classes), Temperature = mean(Temperature)) %>%
ggplot(aes(x=Region, y=Number_of_fires, fill = Temperature))+
geom_col(position='dodge')
p_mat <- cor_pmat(df_scaled)
corr_mat <- ggcorrplot(
corr_mat,
hc.order = FALSE,
type = "upper",
outline.col = "white",
)
corr_mat <- round(cor(df_scaled),2)
p_mat <- cor_pmat(df_scaled)
corr_mat <- ggcorrplot(
corr_mat,
hc.order = FALSE,
type = "upper",
outline.col = "white",
)
ggplotly(corr_mat)
library(dplyr)
library(vtable)
library(plyr)
library(ggplot2)
library(ggcorrplot)
library(plotly)
library(tidyverse)
#feature selection libraries
library(mlbench)
install.packages("mlbench")
library(dplyr)
library(vtable)
library(plyr)
library(ggplot2)
library(ggcorrplot)
library(plotly)
library(tidyverse)
#feature selection libraries
library(mlbench)
library(caret)
# train the model
model <- train(Classes~., data=df_scaled, method="lvq", preProcess="scale", trControl=control)
# prepare training scheme
control <- trainControl(method="repeatedcv", number=10, repeats=3)
# train the model
model <- train(Classes~., data=df_scaled, method="lvq", preProcess="scale", trControl=control)
# train the model
model <- train(Classes~., data=df, method="lvq", preProcess="scale", trControl=control)
?train
# prepare training scheme
set.seed(7)
control <- trainControl(method="repeatedcv", number=10, repeats=3)
# train the model
model <- train(Classes~., data=df, method="lvq", preProcess="scale", trControl=control)
# train the model
model <- train(Classes~., data=df, method="lr", preProcess="scale", trControl=control)
caret.train
?caret.train
# train the model
model <- train(Classes~., data=df, method="gbm", preProcess="scale", trControl=control)
importance <- varImp(model, scale=FALSE)
# train the model
model <- train(Classes~., data=df, method="stepLDA", preProcess="scale", trControl=control)
# train the model
model <- train(Classes~., data=df, method="stepforward", preProcess="scale", trControl=control)
# train the model
model <- train(Classes~., data=df, method="stepforward", preProcess="scale", trControl=control)
# train the model
model <- train(Classes~., data=df, method="leapForward", preProcess="scale", trControl=control)
# train the model
model <- train(Classes~., data=df, method="gbm", preProcess="scale", trControl=control)
# train the model
model <- train(Classes~., data=df, method="gbm", preProcess="scale", trControl=control)
importance <- varImp(model, scale=FALSE)
# train the model
model <- train(Classes~., data=df, method="rocc", preProcess="scale", trControl=control)
# train the model
model <- train(Classes~., data=df, method="adaboost", preProcess="scale", trControl=control)
# train the model
model <- train(Classes~., data=df, method="logicBag", preProcess="scale", trControl=control)
# train the model
model <- train(Classes~., data=df, method="svmLinearWeights2", preProcess="scale", trControl=control)
control <- trainControl(method="svmLinearWeights2", number=10, repeats=3)
control <- trainControl(method="svmLinearWeights2", number=10)
# train the model
model <- train(Classes~., data=df, method="svmLinearWeights2", preProcess="scale", trControl=control)
control <- trainControl(method="leapForward", number=10)
# train the model
model <- train(Classes~., data=df, method="leapForward", preProcess="scale", trControl=control)
# prepare training scheme
set.seed(100)
rPartMod <- train(Class ~ ., data=trainData, method="rpart")
rPartMod <- train(Class ~ ., data=df_scaled, method="rpart")
rPartMod <- train(Classes ~ ., data=df_scaled, method="rpart")
rPartMod <- train(Classes ~ ., data=df_scaled, method="ada")
rPartMod <- train(Classes ~ ., data=df_scaled, method="randomForest")
rPartMod <- train(Classes ~ ., data=df_scaled, method="cforest")
df_scaled$Classes = as.factor(df_scaled$Classes)
control <- trainControl(method="repeatedcv", number=10, repeats=3)
# train the model
model <- train(Classes~., data=df, method="leapForward", preProcess="scale", trControl=control)
importance <- varImp(model, scale=FALSE)
# train the model
model <- train(Classes~., data=df, method="ada", preProcess="scale", trControl=control)
control <- trainControl(method="repeatedcv", number=10, repeats=3)
# train the model
model <- train(Classes~., data=df, method="ada", preProcess="scale", trControl=control)
control <- trainControl(method="repeatedcv", number=10, repeats=3)
# train the model
model <- train(Classes~., data=df, method="ada", preProcess="scale", trControl=control)
# train the model
model <- train(Classes~., data=df, method="ada", trControl=control)
# train the model
model <- train(Classes~., data=df_scaled, method="ada", trControl=control)
# train the model
model <- train(Classes~., data=df_scaled, method="ada", trControl=control)
importance <- varImp(model, scale=FALSE)
```
plot(importance)
# train the model
model <- train(Classes~., data=df_scaled, method="stepLDA", trControl=control)
# train the model
model <- train(Classes~., data=df_scaled, method="stepLDA", trControl=control)
importance <- varImp(model, scale=FALSE)
plot(importance)
# train the model
model <- train(Classes~., data=df_scaled, method="leapForward", trControl=control)
# train the model
model <- train(Classes~., data=df_scaled, method="stepLDA", trControl=control)
# train the model
model <- train(Classes~., data=df_scaled, method="stepLDA", trControl=control)
importance <- varImp(model, scale=FALSE)
plot(importance)
# train the model
model <- train(Classes~., data=df_scaled, method="qda", trControl=control)
importance <- varImp(model, scale=FALSE)
plot(importance)
# train the model
model <- train(Classes~., data=df_scaled, method="qda", trControl=control)
importance <- varImp(model, scale=FALSE)
plot(importance)
importance
plot(importance)
importance
plot(importance)
# train the model
model <- train(Classes~., data=df_scaled, method="stepQDA", trControl=control)
# train the model
model <- train(Classes~., data=df_scaled, method="stepQDA", trControl=control)
importance <- varImp(model, scale=FALSE)
plot(importance)
# train the model
modelLDA <- train(Classes~., data=df_scaled, method="stepLDA", trControl=control)
# train the model
modelLDA <- train(Classes~., data=df_scaled, method="stepLDA", trControl=control)
modelQDA <- train(Classes~., data=df_scaled, method="stepQDA", trControl=control)
modelQDA <- train(Classes~., data=df_scaled, method="stepQDA", trControl=control)
mportance <- varImp(model, scale=FALSE)
plot(i
portance)
library(dplyr)
library(vtable)
library(plyr)
library(ggplot2)
library(ggcorrplot)
library(plotly)
library(tidyverse)
#Feature selection libraries
library(mlbench)
library(caret)
#For Logistic regression
library(caTools)
#For ROC curve
library(ROCR)
df_b <- read.csv("./Algerian_forest_fires_dataset_Bejaia.csv")
df_s <- read.csv("./Algerian_forest_fires_dataset_Sidi_Bel_Abbes.csv")
colSums(is.na(df_b))
colSums(is.na(df_s))
df_b[["Region"]] = 0
df_s[["Region"]] = 1
df_s$DC <- as.double(df_s$DC)
df_s$FWI <- as.double(df_s$FWI)
df = full_join(df_s, df_b)
dim(df)
str(df)
summary(df)
unique(df$year)
unique(df$month)
colSums(is.na(df))
df = df %>% drop_na(DC)
dim(df)
unique(df$Classes)
unique(df$Region)
df$Classes <- trimws(df$Classes, which = c("both"))
unique(df$Classes)
df = df %>% drop_na(Classes)
df$Classes <- mapvalues(df$Classes, from=c("not fire","fire"), to=c(0,1))
unique(df$Classes)
df$Classes <- as.numeric(df$Classes)
st(df)
df <- df[-c(3)]
df_scaled = df
df_scaled[-c(1,2,13,14)] <- scale(df[-c(1,2,13,14)])
st(df_scaled)
aggregate(df$Classes ~ df$Region, FUN = sum)
aggregate(df$Temperature ~ df$Region, FUN = mean)
df %>%
group_by(Region) %>%
summarise(Region = Region, Number_of_fires = sum(Classes), Temperature = mean(Temperature)) %>%
ggplot(aes(x=Region, y=Number_of_fires, fill = Temperature))+
geom_col(position='dodge')
corr_mat <- round(cor(df_scaled),2)
p_mat <- cor_pmat(df_scaled)
corr_mat <- ggcorrplot(
corr_mat,
hc.order = FALSE,
type = "upper",
outline.col = "white",
)
ggplotly(corr_mat)
# prepare training scheme
set.seed(7)
df_scaled$Classes = as.factor(df_scaled$Classes)
control <- trainControl(method="repeatedcv", number=10, repeats=3)
# train the model
modelLDA <- train(Classes~., data=df_scaled, method="stepLDA", trControl=control)
install.packages("klaR")
install.packages("C:/Users/yinfo/Downloads/klaR_1.7-1.tar.gz", repos = NULL, type = "source")
install.packages("C:/Users/yinfo/Downloads/klaR_1.7-1.tar.gz", repos = NULL, type = "source")
install.packages("C:/Users/yinfo/Downloads/klaR_1.7-1.zip", repos = NULL, type = "win.binary")
# prepare training scheme
set.seed(7)
df_scaled$Classes = as.factor(df_scaled$Classes)
control <- trainControl(method="repeatedcv", number=10, repeats=3)
# train the model
modelLDA <- train(Classes~., data=df_scaled, method="stepLDA", trControl=control)
install.packages("klaR")
install.packages('klaR', repos='http://cran.us.r-project.org')
# prepare training scheme
set.seed(7)
df_scaled$Classes = as.factor(df_scaled$Classes)
control <- trainControl(method="repeatedcv", number=10, repeats=3)
# train the model
modelLDA <- train(Classes~., data=df_scaled, method="stepLDA", trControl=control)
# prepare training scheme
set.seed(7)
df_scaled$Classes = as.factor(df_scaled$Classes)
control <- trainControl(method="repeatedcv", number=10, repeats=3)
# train the model
modelLDA <- train(Classes~., data=df_scaled, method="stepLDA", trControl=control)
install.packages("klaR")
install.packages("klaR")
# prepare training scheme
set.seed(7)
df_scaled$Classes = as.factor(df_scaled$Classes)
control <- trainControl(method="repeatedcv", number=10, repeats=3)
# train the model
modelLDA <- train(Classes~., data=df_scaled, method="stepLDA", trControl=control)
install.packages("klaR")
library(dplyr)
library(vtable)
library(plyr)
library(ggplot2)
library(ggcorrplot)
library(plotly)
library(tidyverse)
#Feature selection libraries
library(mlbench)
library(caret)
library(klaR)
install.packages("klaR")
# prepare training scheme
set.seed(7)
df_scaled$Classes = as.factor(df_scaled$Classes)
control <- trainControl(method="repeatedcv", number=10, repeats=3)
# train the model
modelLDA <- train(Classes~., data=df_scaled, method="stepLDA", trControl=control)
library(klaR)
install.packages("questionr")
library(klaR)
# prepare training scheme
set.seed(7)
df_scaled$Classes = as.factor(df_scaled$Classes)
control <- trainControl(method="repeatedcv", number=10, repeats=3)
# train the model
modelLDA <- train(Classes~., data=df_scaled, method="stepLDA", trControl=control)
